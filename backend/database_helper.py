"""
Database Helper for Simplified PhotoIage Table
This module provides functions to interact with the simplified Supabase table
when your teammates are ready to integrate database functionality.
"""

import os
from typing import Optional, Dict, Any
from datetime import datetime
import uuid

# This will be used when your teammates integrate the database
class DatabaseHelper:
    """
    Helper class for database operations with the simplified PhotoIage table.
    
    Simplified Schema:
    - id: BIGINT (auto-increment primary key)
    - created_at: TIMESTAMPTZ (auto-generated)
    - tracking_id: UUID (unique identifier)
    - latitude: REAL
    - longitude: REAL
    - category: TEXT
    - description: TEXT
    - location_address: TEXT
    - image_url: TEXT
    - twitter_url: TEXT
    """
    
    @staticmethod
    def prepare_record_for_database(
        tracking_id: str,
        latitude: float,
        longitude: float,
        category: str,
        description: str,
        image_url: Optional[str] = None,
        location_address: Optional[str] = None,
        twitter_url: Optional[str] = None
    ) -> Dict[str, Any]:
        """
        Prepare a record for insertion into the simplified PhotoIage table.
        
        Args:
            tracking_id: Unique tracking identifier
            latitude: GPS latitude
            longitude: GPS longitude
            category: Issue category (Road Crack, Sidewalk Crack, etc.)
            description: AI-generated description
            image_url: URL to stored image (optional)
            location_address: Human-readable address (optional)
            twitter_url: Social media post URL (optional)
        
        Returns:
            Dict ready for database insertion
        """
        return {
            "tracking_id": tracking_id,
            "latitude": latitude,
            "longitude": longitude,
            "category": category,
            "description": description,
            "image_url": image_url,
            "location_address": location_address,
            "twitter_url": twitter_url,
            # Note: id and created_at are auto-generated by the database
        }
    
    @staticmethod
    def generate_tracking_id() -> str:
        """Generate a unique tracking ID for reports as numeric format."""
        # Use timestamp and random numbers to generate a unique integer-like tracking ID
        timestamp = datetime.now().strftime("%y%m%d%H%M")
        random_suffix = str(uuid.uuid4().int)[-6:]  # Use last 6 digits of UUID integer representation
        return f"{timestamp}{random_suffix}"
    
    @staticmethod
    def validate_required_fields(record: Dict[str, Any]) -> bool:
        """
        Validate that required fields are present.
        
        Args:
            record: Database record dictionary
        
        Returns:
            True if all required fields are present
        """
        required_fields = ["tracking_id", "latitude", "longitude", "category", "description"]
        return all(field in record and record[field] is not None for field in required_fields)

# Example usage for your teammates:
def example_database_integration():
    """
    Example of how to use this helper when integrating with the database.
    This is for your teammates' reference.
    """
    
    # Example data from AI analysis
    analysis_results = {
        'category': 'Road Crack',
        'Text_Description': 'Large pothole visible in road surface',
        'Lat': 37.7749,
        'Long': -122.4194,
        'confidence': 0.87
    }
    
    # Prepare record for database
    tracking_id = DatabaseHelper.generate_tracking_id()
    
    db_record = DatabaseHelper.prepare_record_for_database(
        tracking_id=tracking_id,
        latitude=analysis_results['Lat'],
        longitude=analysis_results['Long'],
        category=analysis_results['category'],
        description=analysis_results['Text_Description'],
        image_url=f"/uploads/{tracking_id}.jpg",  # Example image URL
        location_address=None,  # Can be filled later with reverse geocoding
        twitter_url=None  # Can be filled after social media posting
    )
    
    # Validate before insertion
    if DatabaseHelper.validate_required_fields(db_record):
        print("✅ Record is valid for database insertion")
        print(f"Record: {db_record}")
        
        # Your teammates would insert here:
        # supabase_client.table("PhotoIage").insert(db_record).execute()
        
    else:
        print("❌ Record is missing required fields")
    
    return db_record

if __name__ == "__main__":
    # Test the helper
    example_record = example_database_integration()
